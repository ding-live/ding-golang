// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// CreateCheckResponseStatus - A status representing the result of the check.
type CreateCheckResponseStatus string

const (
	CreateCheckResponseStatusValid            CreateCheckResponseStatus = "valid"
	CreateCheckResponseStatusInvalid          CreateCheckResponseStatus = "invalid"
	CreateCheckResponseStatusWithoutAttempt   CreateCheckResponseStatus = "without_attempt"
	CreateCheckResponseStatusRateLimited      CreateCheckResponseStatus = "rate_limited"
	CreateCheckResponseStatusAlreadyValidated CreateCheckResponseStatus = "already_validated"
	CreateCheckResponseStatusExpiredAuth      CreateCheckResponseStatus = "expired_auth"
)

func (e CreateCheckResponseStatus) ToPointer() *CreateCheckResponseStatus {
	return &e
}

func (e *CreateCheckResponseStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "valid":
		fallthrough
	case "invalid":
		fallthrough
	case "without_attempt":
		fallthrough
	case "rate_limited":
		fallthrough
	case "already_validated":
		fallthrough
	case "expired_auth":
		*e = CreateCheckResponseStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCheckResponseStatus: %v", v)
	}
}

type CreateCheckResponse struct {
	// The UUID of the corresponding authentication.
	AuthenticationUUID *string `json:"authentication_uuid,omitempty"`
	// A status representing the result of the check.
	Status *CreateCheckResponseStatus `json:"status,omitempty"`
}

func (o *CreateCheckResponse) GetAuthenticationUUID() *string {
	if o == nil {
		return nil
	}
	return o.AuthenticationUUID
}

func (o *CreateCheckResponse) GetStatus() *CreateCheckResponseStatus {
	if o == nil {
		return nil
	}
	return o.Status
}
