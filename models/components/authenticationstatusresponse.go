// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/ding-live/ding-golang/internal/utils"
	"time"
)

type BalanceUpdateType string

const (
	BalanceUpdateTypeUnknown               BalanceUpdateType = "unknown"
	BalanceUpdateTypeAuthentication        BalanceUpdateType = "authentication"
	BalanceUpdateTypeAttempt               BalanceUpdateType = "attempt"
	BalanceUpdateTypeAttemptPending        BalanceUpdateType = "attempt_pending"
	BalanceUpdateTypeAttemptSuccess        BalanceUpdateType = "attempt_success"
	BalanceUpdateTypeAuthenticationPending BalanceUpdateType = "authentication_pending"
	BalanceUpdateTypeAuthenticationSuccess BalanceUpdateType = "authentication_success"
)

func (e BalanceUpdateType) ToPointer() *BalanceUpdateType {
	return &e
}
func (e *BalanceUpdateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unknown":
		fallthrough
	case "authentication":
		fallthrough
	case "attempt":
		fallthrough
	case "attempt_pending":
		fallthrough
	case "attempt_success":
		fallthrough
	case "authentication_pending":
		fallthrough
	case "authentication_success":
		*e = BalanceUpdateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BalanceUpdateType: %v", v)
	}
}

// AuthenticationStatusResponseSchemasEventsType - The type of the event.
type AuthenticationStatusResponseSchemasEventsType string

const (
	AuthenticationStatusResponseSchemasEventsTypeAttempt        AuthenticationStatusResponseSchemasEventsType = "attempt"
	AuthenticationStatusResponseSchemasEventsTypeCheck          AuthenticationStatusResponseSchemasEventsType = "check"
	AuthenticationStatusResponseSchemasEventsTypeDeliveryStatus AuthenticationStatusResponseSchemasEventsType = "delivery_status"
	AuthenticationStatusResponseSchemasEventsTypeBalanceUpdate  AuthenticationStatusResponseSchemasEventsType = "balance_update"
)

func (e AuthenticationStatusResponseSchemasEventsType) ToPointer() *AuthenticationStatusResponseSchemasEventsType {
	return &e
}
func (e *AuthenticationStatusResponseSchemasEventsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "attempt":
		fallthrough
	case "check":
		fallthrough
	case "delivery_status":
		fallthrough
	case "balance_update":
		*e = AuthenticationStatusResponseSchemasEventsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthenticationStatusResponseSchemasEventsType: %v", v)
	}
}

type BalanceUpdate struct {
	// The amount of the balance update.
	Amount            *float64           `json:"amount,omitempty"`
	BalanceUpdateType *BalanceUpdateType `json:"balance_update_type,omitempty"`
	CreatedAt         *time.Time         `json:"created_at,omitempty"`
	// The type of the event.
	Type *AuthenticationStatusResponseSchemasEventsType `json:"type,omitempty"`
}

func (b BalanceUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BalanceUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *BalanceUpdate) GetAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *BalanceUpdate) GetBalanceUpdateType() *BalanceUpdateType {
	if o == nil {
		return nil
	}
	return o.BalanceUpdateType
}

func (o *BalanceUpdate) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *BalanceUpdate) GetType() *AuthenticationStatusResponseSchemasEventsType {
	if o == nil {
		return nil
	}
	return o.Type
}

// AuthenticationStatusResponseStatus - The status of the delivery. Possible values are:
//   - `unknown` - The status of the delivery is unknown.
//   - `submitted` - The message has been submitted to the carrier.
//   - `in_transit` - The message is in transit to the recipient.
//   - `delivered` - The message has been delivered to the recipient.
//   - `undeliverable` - The message could not be delivered to the recipient.
type AuthenticationStatusResponseStatus string

const (
	AuthenticationStatusResponseStatusUnknown       AuthenticationStatusResponseStatus = "unknown"
	AuthenticationStatusResponseStatusSubmitted     AuthenticationStatusResponseStatus = "submitted"
	AuthenticationStatusResponseStatusInTransit     AuthenticationStatusResponseStatus = "in_transit"
	AuthenticationStatusResponseStatusDelivered     AuthenticationStatusResponseStatus = "delivered"
	AuthenticationStatusResponseStatusUndeliverable AuthenticationStatusResponseStatus = "undeliverable"
)

func (e AuthenticationStatusResponseStatus) ToPointer() *AuthenticationStatusResponseStatus {
	return &e
}
func (e *AuthenticationStatusResponseStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unknown":
		fallthrough
	case "submitted":
		fallthrough
	case "in_transit":
		fallthrough
	case "delivered":
		fallthrough
	case "undeliverable":
		*e = AuthenticationStatusResponseStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthenticationStatusResponseStatus: %v", v)
	}
}

// AuthenticationStatusResponseSchemasType - The type of the event.
type AuthenticationStatusResponseSchemasType string

const (
	AuthenticationStatusResponseSchemasTypeAttempt        AuthenticationStatusResponseSchemasType = "attempt"
	AuthenticationStatusResponseSchemasTypeCheck          AuthenticationStatusResponseSchemasType = "check"
	AuthenticationStatusResponseSchemasTypeDeliveryStatus AuthenticationStatusResponseSchemasType = "delivery_status"
	AuthenticationStatusResponseSchemasTypeBalanceUpdate  AuthenticationStatusResponseSchemasType = "balance_update"
)

func (e AuthenticationStatusResponseSchemasType) ToPointer() *AuthenticationStatusResponseSchemasType {
	return &e
}
func (e *AuthenticationStatusResponseSchemasType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "attempt":
		fallthrough
	case "check":
		fallthrough
	case "delivery_status":
		fallthrough
	case "balance_update":
		*e = AuthenticationStatusResponseSchemasType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthenticationStatusResponseSchemasType: %v", v)
	}
}

type DeliveryStatus struct {
	// The ID of the attempt.
	AttemptID *string `json:"attempt_id,omitempty"`
	// The attempt number.
	AttemptNumber *int64     `json:"attempt_number,omitempty"`
	CreatedAt     *time.Time `json:"created_at,omitempty"`
	// The status of the delivery. Possible values are:
	//   * `unknown` - The status of the delivery is unknown.
	//   * `submitted` - The message has been submitted to the carrier.
	//   * `in_transit` - The message is in transit to the recipient.
	//   * `delivered` - The message has been delivered to the recipient.
	//   * `undeliverable` - The message could not be delivered to the recipient.
	//
	Status *AuthenticationStatusResponseStatus `json:"status,omitempty"`
	// The type of the event.
	Type *AuthenticationStatusResponseSchemasType `json:"type,omitempty"`
}

func (d DeliveryStatus) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DeliveryStatus) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *DeliveryStatus) GetAttemptID() *string {
	if o == nil {
		return nil
	}
	return o.AttemptID
}

func (o *DeliveryStatus) GetAttemptNumber() *int64 {
	if o == nil {
		return nil
	}
	return o.AttemptNumber
}

func (o *DeliveryStatus) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *DeliveryStatus) GetStatus() *AuthenticationStatusResponseStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *DeliveryStatus) GetType() *AuthenticationStatusResponseSchemasType {
	if o == nil {
		return nil
	}
	return o.Type
}

// AuthenticationStatusResponseType - The type of the event.
type AuthenticationStatusResponseType string

const (
	AuthenticationStatusResponseTypeAttempt        AuthenticationStatusResponseType = "attempt"
	AuthenticationStatusResponseTypeCheck          AuthenticationStatusResponseType = "check"
	AuthenticationStatusResponseTypeDeliveryStatus AuthenticationStatusResponseType = "delivery_status"
	AuthenticationStatusResponseTypeBalanceUpdate  AuthenticationStatusResponseType = "balance_update"
)

func (e AuthenticationStatusResponseType) ToPointer() *AuthenticationStatusResponseType {
	return &e
}
func (e *AuthenticationStatusResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "attempt":
		fallthrough
	case "check":
		fallthrough
	case "delivery_status":
		fallthrough
	case "balance_update":
		*e = AuthenticationStatusResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthenticationStatusResponseType: %v", v)
	}
}

type Check struct {
	// The code that was checked.
	Code      *string    `json:"code,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The ID of the check.
	ID     *string      `json:"id,omitempty"`
	Status *CheckStatus `json:"status,omitempty"`
	// The type of the event.
	Type *AuthenticationStatusResponseType `json:"type,omitempty"`
}

func (c Check) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *Check) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *Check) GetCode() *string {
	if o == nil {
		return nil
	}
	return o.Code
}

func (o *Check) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Check) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Check) GetStatus() *CheckStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *Check) GetType() *AuthenticationStatusResponseType {
	if o == nil {
		return nil
	}
	return o.Type
}

// Capability - The capability of the attempt.
type Capability string

const (
	CapabilityRcs      Capability = "rcs"
	CapabilityText     Capability = "text"
	CapabilityWhatsapp Capability = "whatsapp"
	CapabilityViber    Capability = "viber"
)

func (e Capability) ToPointer() *Capability {
	return &e
}
func (e *Capability) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "rcs":
		fallthrough
	case "text":
		fallthrough
	case "whatsapp":
		fallthrough
	case "viber":
		*e = Capability(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Capability: %v", v)
	}
}

// AuthenticationStatusResponseSchemasStatus - The status of the attempt. Possible values are:
//   - `pending` - The attempt is pending.
//   - `delivered` - The attempt was delivered.
//   - `failed` - The attempt failed.
//   - `rate_limited` - The authentication was rate limited and cannot be retried.
//   - `expired` - The authentication has expired and cannot be retried.
type AuthenticationStatusResponseSchemasStatus string

const (
	AuthenticationStatusResponseSchemasStatusPending     AuthenticationStatusResponseSchemasStatus = "pending"
	AuthenticationStatusResponseSchemasStatusDelivered   AuthenticationStatusResponseSchemasStatus = "delivered"
	AuthenticationStatusResponseSchemasStatusFailed      AuthenticationStatusResponseSchemasStatus = "failed"
	AuthenticationStatusResponseSchemasStatusRateLimited AuthenticationStatusResponseSchemasStatus = "rate_limited"
	AuthenticationStatusResponseSchemasStatusExpired     AuthenticationStatusResponseSchemasStatus = "expired"
)

func (e AuthenticationStatusResponseSchemasStatus) ToPointer() *AuthenticationStatusResponseSchemasStatus {
	return &e
}
func (e *AuthenticationStatusResponseSchemasStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "delivered":
		fallthrough
	case "failed":
		fallthrough
	case "rate_limited":
		fallthrough
	case "expired":
		*e = AuthenticationStatusResponseSchemasStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthenticationStatusResponseSchemasStatus: %v", v)
	}
}

// Type - The type of the event.
type Type string

const (
	TypeAttempt        Type = "attempt"
	TypeCheck          Type = "check"
	TypeDeliveryStatus Type = "delivery_status"
	TypeBalanceUpdate  Type = "balance_update"
)

func (e Type) ToPointer() *Type {
	return &e
}
func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "attempt":
		fallthrough
	case "check":
		fallthrough
	case "delivery_status":
		fallthrough
	case "balance_update":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

type Attempt struct {
	// The attempt number.
	AttemptNumber *int64 `json:"attempt_number,omitempty"`
	// The capability of the attempt.
	Capability *Capability `json:"capability,omitempty"`
	// The content of the attempt.
	Content   *string    `json:"content,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The ID of the attempt.
	ID *string `json:"id,omitempty"`
	// The sender ID of the attempt.
	SenderID *string `json:"sender_id,omitempty"`
	// The status of the attempt. Possible values are:
	//   * `pending` - The attempt is pending.
	//   * `delivered` - The attempt was delivered.
	//   * `failed` - The attempt failed.
	//   * `rate_limited` - The authentication was rate limited and cannot be retried.
	//   * `expired` - The authentication has expired and cannot be retried.
	//
	Status *AuthenticationStatusResponseSchemasStatus `json:"status,omitempty"`
	// The type of the event.
	Type *Type `json:"type,omitempty"`
}

func (a Attempt) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *Attempt) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *Attempt) GetAttemptNumber() *int64 {
	if o == nil {
		return nil
	}
	return o.AttemptNumber
}

func (o *Attempt) GetCapability() *Capability {
	if o == nil {
		return nil
	}
	return o.Capability
}

func (o *Attempt) GetContent() *string {
	if o == nil {
		return nil
	}
	return o.Content
}

func (o *Attempt) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Attempt) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Attempt) GetSenderID() *string {
	if o == nil {
		return nil
	}
	return o.SenderID
}

func (o *Attempt) GetStatus() *AuthenticationStatusResponseSchemasStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *Attempt) GetType() *Type {
	if o == nil {
		return nil
	}
	return o.Type
}

type EventsType string

const (
	EventsTypeAttempt        EventsType = "Attempt"
	EventsTypeCheck          EventsType = "Check"
	EventsTypeDeliveryStatus EventsType = "Delivery Status"
	EventsTypeBalanceUpdate  EventsType = "Balance Update"
)

type Events struct {
	Attempt        *Attempt
	Check          *Check
	DeliveryStatus *DeliveryStatus
	BalanceUpdate  *BalanceUpdate

	Type EventsType
}

func CreateEventsAttempt(attempt Attempt) Events {
	typ := EventsTypeAttempt

	return Events{
		Attempt: &attempt,
		Type:    typ,
	}
}

func CreateEventsCheck(check Check) Events {
	typ := EventsTypeCheck

	return Events{
		Check: &check,
		Type:  typ,
	}
}

func CreateEventsDeliveryStatus(deliveryStatus DeliveryStatus) Events {
	typ := EventsTypeDeliveryStatus

	return Events{
		DeliveryStatus: &deliveryStatus,
		Type:           typ,
	}
}

func CreateEventsBalanceUpdate(balanceUpdate BalanceUpdate) Events {
	typ := EventsTypeBalanceUpdate

	return Events{
		BalanceUpdate: &balanceUpdate,
		Type:          typ,
	}
}

func (u *Events) UnmarshalJSON(data []byte) error {

	var balanceUpdate BalanceUpdate = BalanceUpdate{}
	if err := utils.UnmarshalJSON(data, &balanceUpdate, "", true, true); err == nil {
		u.BalanceUpdate = &balanceUpdate
		u.Type = EventsTypeBalanceUpdate
		return nil
	}

	var check Check = Check{}
	if err := utils.UnmarshalJSON(data, &check, "", true, true); err == nil {
		u.Check = &check
		u.Type = EventsTypeCheck
		return nil
	}

	var deliveryStatus DeliveryStatus = DeliveryStatus{}
	if err := utils.UnmarshalJSON(data, &deliveryStatus, "", true, true); err == nil {
		u.DeliveryStatus = &deliveryStatus
		u.Type = EventsTypeDeliveryStatus
		return nil
	}

	var attempt Attempt = Attempt{}
	if err := utils.UnmarshalJSON(data, &attempt, "", true, true); err == nil {
		u.Attempt = &attempt
		u.Type = EventsTypeAttempt
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Events", string(data))
}

func (u Events) MarshalJSON() ([]byte, error) {
	if u.Attempt != nil {
		return utils.MarshalJSON(u.Attempt, "", true)
	}

	if u.Check != nil {
		return utils.MarshalJSON(u.Check, "", true)
	}

	if u.DeliveryStatus != nil {
		return utils.MarshalJSON(u.DeliveryStatus, "", true)
	}

	if u.BalanceUpdate != nil {
		return utils.MarshalJSON(u.BalanceUpdate, "", true)
	}

	return nil, errors.New("could not marshal union type Events: all fields are null")
}

// AuthenticationStatusResponseDeviceType - The type of device the user is using.
type AuthenticationStatusResponseDeviceType string

const (
	AuthenticationStatusResponseDeviceTypeIos     AuthenticationStatusResponseDeviceType = "IOS"
	AuthenticationStatusResponseDeviceTypeAndroid AuthenticationStatusResponseDeviceType = "ANDROID"
	AuthenticationStatusResponseDeviceTypeWeb     AuthenticationStatusResponseDeviceType = "WEB"
)

func (e AuthenticationStatusResponseDeviceType) ToPointer() *AuthenticationStatusResponseDeviceType {
	return &e
}
func (e *AuthenticationStatusResponseDeviceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "IOS":
		fallthrough
	case "ANDROID":
		fallthrough
	case "WEB":
		*e = AuthenticationStatusResponseDeviceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthenticationStatusResponseDeviceType: %v", v)
	}
}

// Signals - [Signals](/guides/prevent-fraud#signals) are data points used to distinguish between fraudulent and legitimate users.
type Signals struct {
	// The Android SMS Retriever API hash code that identifies your app. This allows you to automatically retrieve and fill the OTP code on Android devices.
	AppRealm *string `json:"app_realm,omitempty"`
	// The version of your application.
	AppVersion *string `json:"app_version,omitempty"`
	// Unique identifier for the user's device. For Android, this corresponds to the `ANDROID_ID` and for iOS, this corresponds to the `identifierForVendor`.
	DeviceID *string `json:"device_id,omitempty"`
	// The model of the user's device.
	DeviceModel *string `json:"device_model,omitempty"`
	// The type of device the user is using.
	DeviceType *AuthenticationStatusResponseDeviceType `json:"device_type,omitempty"`
	// The IP address of the user's device.
	IP *string `json:"ip,omitempty"`
	// This signal should do more than just confirm if a user is returning to your app; it should provide a higher level of trust, indicating that the user is genuine. For more details, refer to [Signals](/guides/prevent-fraud#signals).
	IsReturningUser *bool `json:"is_returning_user,omitempty"`
	// The version of the user's device operating system.
	OsVersion *string `json:"os_version,omitempty"`
}

func (o *Signals) GetAppRealm() *string {
	if o == nil {
		return nil
	}
	return o.AppRealm
}

func (o *Signals) GetAppVersion() *string {
	if o == nil {
		return nil
	}
	return o.AppVersion
}

func (o *Signals) GetDeviceID() *string {
	if o == nil {
		return nil
	}
	return o.DeviceID
}

func (o *Signals) GetDeviceModel() *string {
	if o == nil {
		return nil
	}
	return o.DeviceModel
}

func (o *Signals) GetDeviceType() *AuthenticationStatusResponseDeviceType {
	if o == nil {
		return nil
	}
	return o.DeviceType
}

func (o *Signals) GetIP() *string {
	if o == nil {
		return nil
	}
	return o.IP
}

func (o *Signals) GetIsReturningUser() *bool {
	if o == nil {
		return nil
	}
	return o.IsReturningUser
}

func (o *Signals) GetOsVersion() *string {
	if o == nil {
		return nil
	}
	return o.OsVersion
}

type AuthenticationStatusResponse struct {
	// A unique, user-defined identifier that will be included in webhook events.
	CorrelationID *string    `json:"correlation_id,omitempty"`
	CreatedAt     *time.Time `json:"created_at,omitempty"`
	// Represents a collection of events that occur during the authentication process. Each event captures specific actions and outcomes related to the authentication attempts, checks, delivery statuses, and balance updates. The array can contain different types of events, each with its own structure and properties.
	Events []Events `json:"events,omitempty"`
	// An E.164 formatted phone number.
	PhoneNumber *string `json:"phone_number,omitempty"`
	// [Signals](/guides/prevent-fraud#signals) are data points used to distinguish between fraudulent and legitimate users.
	Signals *Signals `json:"signals,omitempty"`
	// The template id associated with the message content variant to be sent.
	TemplateID *string `json:"template_id,omitempty"`
	// The UUID of the corresponding authentication.
	UUID *string `json:"uuid,omitempty"`
}

func (a AuthenticationStatusResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AuthenticationStatusResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AuthenticationStatusResponse) GetCorrelationID() *string {
	if o == nil {
		return nil
	}
	return o.CorrelationID
}

func (o *AuthenticationStatusResponse) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *AuthenticationStatusResponse) GetEvents() []Events {
	if o == nil {
		return nil
	}
	return o.Events
}

func (o *AuthenticationStatusResponse) GetPhoneNumber() *string {
	if o == nil {
		return nil
	}
	return o.PhoneNumber
}

func (o *AuthenticationStatusResponse) GetSignals() *Signals {
	if o == nil {
		return nil
	}
	return o.Signals
}

func (o *AuthenticationStatusResponse) GetTemplateID() *string {
	if o == nil {
		return nil
	}
	return o.TemplateID
}

func (o *AuthenticationStatusResponse) GetUUID() *string {
	if o == nil {
		return nil
	}
	return o.UUID
}
