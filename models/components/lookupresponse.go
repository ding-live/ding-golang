// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// LineType - The type of phone line.
//   - `CallingCards` - Numbers that are associated with providers of pre-paid domestic and international calling cards.
//   - `FixedLine` - Landline phone numbers.
//   - `InternetServiceProvider` - Numbers reserved for ISPs.
//   - `LocalRate` - Numbers that can be assigned non-geographically.
//   - `Mobile` - Mobile phone numbers.
//   - `Other` - Other types of services.
//   - `Pager` - Number ranges specifically allocated to paging devices.
//   - `PayPhone` - Allocated numbers for payphone kiosks in some countries.
//   - `PremiumRate` - Landline numbers where the calling party pays more than standard.
//   - `Satellite` - Satellite phone numbers.
//   - `Service` - Automated applications.
//   - `SharedCost` - Specific landline ranges where the cost of making the call is shared between the calling and called party.
//   - `ShortCodesCommercial` - Short codes are memorable, easy-to-use numbers, like the UK's NHS 111, often sold to businesses. Not available in all countries.
//   - `TollFree` - Number where the called party pays for the cost of the call not the calling party.
//   - `UniversalAccess` - Number ranges reserved for Universal Access initiatives.
//   - `Unknown` - Unknown phone number type.
//   - `VPN` - Numbers are used exclusively within a private telecommunications network, connecting the operator's terminals internally and not accessible via the public telephone network.
//   - `VoiceMail` - A specific category of Interactive Voice Response (IVR) services.
//   - `Voip` - Specific ranges for providers of VoIP services to allow incoming calls from the regular telephony network.
type LineType string

const (
	LineTypeCallingCards            LineType = "CallingCards"
	LineTypeFixedLine               LineType = "FixedLine"
	LineTypeInternetServiceProvider LineType = "InternetServiceProvider"
	LineTypeLocalRate               LineType = "LocalRate"
	LineTypeMobile                  LineType = "Mobile"
	LineTypeOther                   LineType = "Other"
	LineTypePager                   LineType = "Pager"
	LineTypePayPhone                LineType = "PayPhone"
	LineTypePremiumRate             LineType = "PremiumRate"
	LineTypeSatellite               LineType = "Satellite"
	LineTypeService                 LineType = "Service"
	LineTypeSharedCost              LineType = "SharedCost"
	LineTypeShortCodesCommercial    LineType = "ShortCodesCommercial"
	LineTypeTollFree                LineType = "TollFree"
	LineTypeUniversalAccess         LineType = "UniversalAccess"
	LineTypeUnknown                 LineType = "Unknown"
	LineTypeVpn                     LineType = "VPN"
	LineTypeVoiceMail               LineType = "VoiceMail"
	LineTypeVoip                    LineType = "Voip"
)

func (e LineType) ToPointer() *LineType {
	return &e
}
func (e *LineType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CallingCards":
		fallthrough
	case "FixedLine":
		fallthrough
	case "InternetServiceProvider":
		fallthrough
	case "LocalRate":
		fallthrough
	case "Mobile":
		fallthrough
	case "Other":
		fallthrough
	case "Pager":
		fallthrough
	case "PayPhone":
		fallthrough
	case "PremiumRate":
		fallthrough
	case "Satellite":
		fallthrough
	case "Service":
		fallthrough
	case "SharedCost":
		fallthrough
	case "ShortCodesCommercial":
		fallthrough
	case "TollFree":
		fallthrough
	case "UniversalAccess":
		fallthrough
	case "Unknown":
		fallthrough
	case "VPN":
		fallthrough
	case "VoiceMail":
		fallthrough
	case "Voip":
		*e = LineType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LineType: %v", v)
	}
}

type LookupResponse struct {
	// The CNAM (Caller ID Name) associated with the phone number. Contact us if you need to use this functionality. Once enabled, put `cnam` option to `type` query parameter.
	CallerName *string `json:"caller_name,omitempty"`
	// The carrier of the phone number.
	Carrier *string `json:"carrier,omitempty"`
	// The ISO 3166-1 alpha-2 country code of the phone number.
	CountryCode *string `json:"country_code,omitempty"`
	// The type of phone line.
	//   * `CallingCards` - Numbers that are associated with providers of pre-paid domestic and international calling cards.
	//   * `FixedLine` - Landline phone numbers.
	//   * `InternetServiceProvider` - Numbers reserved for ISPs.
	//   * `LocalRate` - Numbers that can be assigned non-geographically.
	//   * `Mobile` - Mobile phone numbers.
	//   * `Other` - Other types of services.
	//   * `Pager` - Number ranges specifically allocated to paging devices.
	//   * `PayPhone` - Allocated numbers for payphone kiosks in some countries.
	//   * `PremiumRate` - Landline numbers where the calling party pays more than standard.
	//   * `Satellite` - Satellite phone numbers.
	//   * `Service` - Automated applications.
	//   * `SharedCost` - Specific landline ranges where the cost of making the call is shared between the calling and called party.
	//   * `ShortCodesCommercial` - Short codes are memorable, easy-to-use numbers, like the UK's NHS 111, often sold to businesses. Not available in all countries.
	//   * `TollFree` - Number where the called party pays for the cost of the call not the calling party.
	//   * `UniversalAccess` - Number ranges reserved for Universal Access initiatives.
	//   * `Unknown` - Unknown phone number type.
	//   * `VPN` - Numbers are used exclusively within a private telecommunications network, connecting the operator's terminals internally and not accessible via the public telephone network.
	//   * `VoiceMail` - A specific category of Interactive Voice Response (IVR) services.
	//   * `Voip` - Specific ranges for providers of VoIP services to allow incoming calls from the regular telephony network.
	//
	LineType *LineType `json:"line_type,omitempty"`
	// The mobile country code of the phone number.
	Mcc *string `json:"mcc,omitempty"`
	// The mobile network code of the phone number.
	Mnc *string `json:"mnc,omitempty"`
	// Whether the phone number has been ported.
	NumberPorted *bool `json:"number_ported,omitempty"`
	// An E.164 formatted phone number.
	PhoneNumber *string `json:"phone_number,omitempty"`
	// Whether the phone number is in our database of disposable, temporary phone numbers
	TemporaryPhoneNumber *bool `json:"temporary_phone_number,omitempty"`
}

func (o *LookupResponse) GetCallerName() *string {
	if o == nil {
		return nil
	}
	return o.CallerName
}

func (o *LookupResponse) GetCarrier() *string {
	if o == nil {
		return nil
	}
	return o.Carrier
}

func (o *LookupResponse) GetCountryCode() *string {
	if o == nil {
		return nil
	}
	return o.CountryCode
}

func (o *LookupResponse) GetLineType() *LineType {
	if o == nil {
		return nil
	}
	return o.LineType
}

func (o *LookupResponse) GetMcc() *string {
	if o == nil {
		return nil
	}
	return o.Mcc
}

func (o *LookupResponse) GetMnc() *string {
	if o == nil {
		return nil
	}
	return o.Mnc
}

func (o *LookupResponse) GetNumberPorted() *bool {
	if o == nil {
		return nil
	}
	return o.NumberPorted
}

func (o *LookupResponse) GetPhoneNumber() *string {
	if o == nil {
		return nil
	}
	return o.PhoneNumber
}

func (o *LookupResponse) GetTemporaryPhoneNumber() *bool {
	if o == nil {
		return nil
	}
	return o.TemporaryPhoneNumber
}
