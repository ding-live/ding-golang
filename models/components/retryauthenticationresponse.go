// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/ding-live/ding-golang/internal/utils"
	"time"
)

// RetryAuthenticationResponseStatus - The status of the authentication.
type RetryAuthenticationResponseStatus string

const (
	RetryAuthenticationResponseStatusApproved         RetryAuthenticationResponseStatus = "approved"
	RetryAuthenticationResponseStatusDenied           RetryAuthenticationResponseStatus = "denied"
	RetryAuthenticationResponseStatusNoAttempt        RetryAuthenticationResponseStatus = "no_attempt"
	RetryAuthenticationResponseStatusRateLimited      RetryAuthenticationResponseStatus = "rate_limited"
	RetryAuthenticationResponseStatusExpiredAuth      RetryAuthenticationResponseStatus = "expired_auth"
	RetryAuthenticationResponseStatusAlreadyValidated RetryAuthenticationResponseStatus = "already_validated"
)

func (e RetryAuthenticationResponseStatus) ToPointer() *RetryAuthenticationResponseStatus {
	return &e
}

func (e *RetryAuthenticationResponseStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "approved":
		fallthrough
	case "denied":
		fallthrough
	case "no_attempt":
		fallthrough
	case "rate_limited":
		fallthrough
	case "expired_auth":
		fallthrough
	case "already_validated":
		*e = RetryAuthenticationResponseStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetryAuthenticationResponseStatus: %v", v)
	}
}

type RetryAuthenticationResponse struct {
	// The UUID of the corresponding authentication.
	AuthenticationUUID *string    `json:"authentication_uuid,omitempty"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	// The time at which the next retry will be available.
	NextRetryAt *time.Time `json:"next_retry_at,omitempty"`
	// The number of retries remaining.
	RemainingRetry *int64 `json:"remaining_retry,omitempty"`
	// The status of the authentication.
	Status *RetryAuthenticationResponseStatus `json:"status,omitempty"`
}

func (r RetryAuthenticationResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetryAuthenticationResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RetryAuthenticationResponse) GetAuthenticationUUID() *string {
	if o == nil {
		return nil
	}
	return o.AuthenticationUUID
}

func (o *RetryAuthenticationResponse) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *RetryAuthenticationResponse) GetNextRetryAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.NextRetryAt
}

func (o *RetryAuthenticationResponse) GetRemainingRetry() *int64 {
	if o == nil {
		return nil
	}
	return o.RemainingRetry
}

func (o *RetryAuthenticationResponse) GetStatus() *RetryAuthenticationResponseStatus {
	if o == nil {
		return nil
	}
	return o.Status
}
